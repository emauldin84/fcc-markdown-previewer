{"version":3,"sources":["components/Editor.js","components/Preview.js","App.js","serviceWorker.js","index.js"],"names":["Editor","handleSetText","text","setText","setPreview","className","onClick","id","onChange","value","rows","cols","Preview","preview","dangerouslySetInnerHTML","__html","marked","setOptions","breaks","App","useState","defaultText","useEffect","handleSetPreview","mark","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAkBeA,EAhBA,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,cAAeC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAK3C,OACI,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,mBACX,uBAAGA,UAAU,SAAb,UACA,uBAAGA,UAAU,QAAQC,QARb,WAChBH,EAAQ,IACRC,EAAW,MAMH,iBAEJ,8BAAUG,GAAG,SAASC,SAAUP,EAAeQ,MAAOP,EAAMQ,KAAK,KAAKC,KAAK,SCAxEC,EAXC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACd,OACI,yBAAKR,UAAU,oBACX,yBAAKA,UAAU,0CACX,uBAAGA,UAAU,SAAb,cAEJ,yBAAKE,GAAG,UAAUO,wBAAyB,CAACC,OAAQF,OCDhEG,IAAOC,WAAW,CAACC,QAAQ,IA4BZC,MA1Bf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNP,EADM,KACGT,EADH,OAEWgB,mBAASC,GAFpB,mBAENnB,EAFM,KAEAC,EAFA,KAIbmB,qBAAU,WACRC,EAAiBrB,KAChB,IAEH,IAAMqB,EAAmB,SAACrB,GACxB,IAAIsB,EAAOR,IAAOd,GAClBE,EAAWoB,IAQb,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,CAAQJ,cAPU,SAACwB,GACrBtB,EAAQsB,EAAEC,OAAOjB,OACjBc,EAAiBE,EAAEC,OAAOjB,QAKcP,KAAMA,EAAMC,QAASA,EAASC,WAAYA,IAChF,kBAAC,EAAD,CAASS,QAASA,MAQlBQ,EAAc,yUC1BAM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f013e4c9.chunk.js","sourcesContent":["import React from 'react'\n\nconst Editor = ({handleSetText, text, setText, setPreview}) => {\n    const clearEditor = () => {\n        setText('')\n        setPreview('')\n    }\n    return (\n        <div className=\"editorContainer\">\n            <div className='headerContainer'>\n                <p className='title'>Editor</p>\n                <p className='clear' onClick={clearEditor}>clear editor</p>\n            </div>\n            <textarea id=\"editor\" onChange={handleSetText} value={text} rows=\"20\" cols=\"80\"/>\n        </div>\n    )\n}\n\nexport default Editor\n\n","import React from 'react'\n\nconst Preview = ({preview}) => {\n    return (\n        <div className=\"previewContainer\">\n            <div className='headerContainer previewHeaderContainer'>\n                <p className='title'>Previewer</p>\n            </div>\n            <div id=\"preview\" dangerouslySetInnerHTML={{__html: preview}}/>\n        </div>\n    )\n}\n\nexport default Preview","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport marked from 'marked'\n\nimport Editor from './components/Editor'\nimport Preview from './components/Preview'\n\nmarked.setOptions({breaks: true})\n\nfunction App() {\n  const [preview, setPreview] = useState('')\n  const [text, setText] = useState(defaultText)\n\n  useEffect(() => {\n    handleSetPreview(text)\n  }, [])\n\n  const handleSetPreview = (text) => {\n    let mark = marked(text)\n    setPreview(mark)\n  }\n\n  const handleSetText = (e) => {\n    setText(e.target.value)\n    handleSetPreview(e.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n      <Editor handleSetText={handleSetText} text={text} setText={setText} setPreview={setPreview}/>\n      <Preview preview={preview}/>\n    </div>\n  );\n}\n\nexport default App;\n\n\nconst defaultText = \"# Header \\n\\\n## Sub Header \\n\\\n[I'm an inline-style link](https://www.google.com) \\n\\\n\\n\\\n`inline code` \\n\\\n\\n\\\n``` \\n code block \\n ``` \\n\\\n1. list item 1 \\n\\\n2. list item 2 \\n\\\n\\n\\\n> block quote\\n\\\n\\n\\\ninline image\\n\\\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \\\"Logo Title Text 1\\\")\\n\\\n\\n\\\n**bold text**\\n\\\n\"\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}